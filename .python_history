impot json
import os
import pathlib
import subprocess
xit
import json
import .src.itep.structure
import src.itep.structure
import src.itep.structure as s
s.load_lecture_yaml("/home/luis/Documents/01-U/00-Fisica/00AA-Lectures/UCR-FS0121/config.yaml")
s
fs = s.load_lecture_yaml("/home/luis/Documents/01-U/00-Fisica/00AA-Lectures/UCR-FS0121/config.yaml")
fs
fs.get_description()
fs.get_description(name)
fs.get_description('name')
fs.get_description('T04')
fs.code
fs.keys()
fs.keys
fs.key
fs.descriptions
fs.patterns
fs.type
fs.to_dict()
fs.to_dict().keys()
fs.config_files
fs.eval
fs.eval_config_files
fs.abs_project_dir
fs._library
fs.lecture_code
fs.books
fs.admin
fs.code
import iptp.lecture
import itep.lecture
import itep.structure
import itep.structure
q
quit()
import itep.lecture as lecture
import itep.lecture as lecture
import itep.lecture as lecture
import itep.lecture
import itep.structure
import itep.structure
import itep.structure
exit()
import itep.structure
import itep.structure
import itep.lecture as lecture
lecture.topics
lecture.Lecture
lecture = lecture.Lecture()
lecture
from itep.utils import load_yaml
y = load_yaml("/home/luis/Documents/01-U/00-Fisica/00AA-Lectures/UCR-FS0121/config.yaml")
y
lecture = y
from itep.lecture import Lecture
l = Lecture(y)
l
L = Lecture()
L
y
y.press
y["press"]
y["press"]["config_files"]
y
y.get("data")
y.get("abs_project_dir")
y.get("data","abs_project_dir")
y.get("data").get("abs_project_dir")
from pathlib import Path
Path(y.get("data").get("abs_project_dir")).resolve()
d = y.get("data")
d
type(d)
from itep.structure import MetaData
MetaData(**d)
MetaData(*d)
MetaData(d)
exit()
from itep.structure import MetaData
from itep.structure import MetaData
from pathlib import Path
from itep.utils import load_yaml
y = load_yaml("/home/luis/Documents/01-U/00-Fisica/00AA-Lectures/UCR-FS0121/config.yaml")
d = y.get("data")
m = MetaData(d)
m
m.abs_project_dir
m.abs_src_dir
if "base" in y.keys(): print("Eureka")
if "eval" in y.keys(): print("Eureka")
from itep.structure import ConfigType
exit()
from itep.structure import ConfigType
ty = ConfigType.BASE
ty.value
for c in ConfigType: print(c)
exit()
from itep.structure import ConfigType, Topic
from itep.utils import load_yaml
y = load_yaml("/home/luis/Documents/01-U/00-Fisica/00AA-Lectures/UCR-FS0121/config.yaml")
y.topics
y[topics]
y["topics]
y["topics"]
y["topics"].items
for k, t in y["topics"].items():
    print(k,t)
for k, t in y["topics"].items():
    print(int(k[1:]),t)
y["topics"]["T01"]["chapters"][0][:3]
if y["topics"]["T01"]["chapters"][0][:3] in y["books"]: print("y")
y["topics"]["T01"]["chapters"][0][4:]
y["topics"]["T01"]["chapters"][0][3:]
for k, t in y["topics"].items():
    print(k[1:],t)
cfg =  y
cfg['books']['B01']['code'][:3]
 books_links_relations = {}
    for topic_key, topic_value in cfg["topics"]:
        for chapter in topic_value["chapters"]:
            if chapter[:3] in cfg["books"]:
                book_info = cfg["books"][chapter[:3]]
                chapter_src = "{}_{}_{}/{}".format(
                    book_info["code"],
                    book_info["name"],
                    book_info["edition"],
                    chapter[3:],
                )
                chapter_link = "{}-{}/{}-{}-{}".format(
                    topic_key[1:],
                    topic_value["name"],
                    book_info["code"][:3],
                    book_info["name"].lower(),
                    chapter[3:],
                )
                books_links_relations[chapter_link] = chapter_src
books_links_relations = {}
    for topic_key, topic_value in cfg["topics"]:
        for chapter in topic_value["chapters"]:
            if chapter[:3] in cfg["books"]:
                book_info = cfg["books"][chapter[:3]]
                chapter_src = "{}_{}_{}/{}".format(
                    book_info["code"],
                    book_info["name"],
                    book_info["edition"],
                    chapter[3:],
                )
                chapter_link = "{}-{}/{}-{}-{}".format(
                    topic_key[1:],
                    topic_value["name"],
                    book_info["code"][:3],
                    book_info["name"].lower(),
                    chapter[3:],
                )
                books_links_relations[chapter_link] = chapter_src
books_links_relations = {}
for topic_key, topic_value in cfg["topics"]:
    for chapter in topic_value["chapters"]:
        if chapter[:3] in cfg["books"]:
            book_info = cfg["books"][chapter[:3]]
            chapter_src = "{}_{}_{}/{}".format(
                book_info["code"],
                book_info["name"],
                book_info["edition"],
                chapter[3:],
            )
            chapter_link = "{}-{}/{}-{}-{}".format(
                topic_key[1:],
                topic_value["name"],
                book_info["code"][:3],
                book_info["name"].lower(),
                chapter[3:],
            )
            books_links_relations[chapter_link] = chapter_src
books_links_relations = {}
for topic_key, topic_value in cfg["topics"].items():
    for chapter in topic_value["chapters"]:
        if chapter[:3] in cfg["books"]:
            book_info = cfg["books"][chapter[:3]]
            chapter_src = "{}_{}_{}/{}".format(
                book_info["code"],
                book_info["name"],
                book_info["edition"],
                chapter[3:],
            )
            chapter_link = "{}-{}/{}-{}-{}".format(
                topic_key[1:],
                topic_value["name"],
                book_info["code"][:3],
                book_info["name"].lower(),
                chapter[3:],
            )
            books_links_relations[chapter_link] = chapter_src
book_links_relations
books_links_relations
from itep.utils import load_yaml
cfg = load_yaml("/home/luis/Documents/01-U/00-Fisica/00AA-Lectures/UCR-FS0121/config.yaml")
books_links_relations = {}
for topic_key, topic_value in cfg["topics"].items():
    for chapter in topic_value["chapters"]:
        if chapter[:3] in cfg["books"]:
            book_info = cfg["books"][chapter[:3]]
            chapter_src = "{}_{}_{}/{}".format(
                book_info["code"],
                book_info["name"],
                book_info["edition"],
                chapter[3:],
            )
            chapter_link = "{}-{}/{}-{}-{}".format(
                topic_key[1:],
                topic_value["name"],
                book_info["code"][:3],
                book_info["name"].lower(),
                chapter[3:],
            )
            books_links_relations[chapter_link] = chapter_src
books_links_relations
from pathlib import Path
p = Path(~/Documents/test)
p = Path("~/Documents/test")
p
p.mkdir(parents=True, exist_ok=Trues)
p.mkdir(parents=True, exist_ok=True)
p.mkdir(parents=True, exist_ok=True)
from pathlib import Path
template_dir = Path(user_config_dir("mytex/templates", "LuisUmana"))
from appdirs import user_config_dir
template_dir = Path(user_config_dir("mytex/templates", "LuisUmana"))
user_config_dir("mytex/templates", "LuisUmana")
user_config_dir("mytex/templates")
with open(template_dir / "TNNE000.tex", r) as f:
    exe_file = f.read()
    
with open(template_dir / "TNNE000.tex", "r") as f:
    exe_file = f.read()
    
exe_file
type(exe_file)
with open(template_dir / "TNNE000.tex", "r") as f:
    exe_file = f.lines()
    
with open(template_dir / "TNNE000.tex", "r") as f:
    exe_file = f.readlines()
    
exe_file
reference_info = "hola mundo"
msn = ""
for line in exe_file:
    if "\\[CH]{EEE}" in line:
        msn += reference_info
    else:
        msn += line
        
msn
msn = ""
for line in exe_file:
    if "\\\\[CH]{EEE}" in line:
        msn += reference_info
    else:
        msn += line
        
msn
msn = ""
for line in exe_file:
    if "  \\\\[CH]{EEE}" in line:
        msn += reference_info
    else:
        msn += line
        
exe_file[1] = reference_info
msn = "".join(exe_file)
 
msn
ch = 5
id = 2
b="hola"
f"{ch}\{{id}\}{{b}}"
f"{ch}\{ {id}\}{{b}}"
f"{ch}\{ {id} \}{{b}}"
f"{ch}{{id}}{{b}}"
f"{ch}\{{id}}{{b}}"
"{}\{{}\}\{{}\}".format(ch,id,b)
"{}{}\}\{{}\}"
f"{ch}"+"{"+str(id)+"}{"+str(b)+"}"
Path(".")
Path(".").absolute
Path(".").absolute()
from pathlib import Path
Path("~/Documents").absolute()
Path("Documents").absolute()
Path
Path("~/Documents").resolve()
Path.cwd()
Path.expanduser()
Path('Documents').expanduser()
Path('Documents').expanduser().absolute()
Path('~/Documents').expanduser()
Path('./Documents').expanduser()
p = Path('./Documents').expanduser()
p.absolute()
q = Path('~/Documents').expanduser()
q.absolute


exit
